using System;
using  Cream;
namespace  Cream
{
	
	public class IntDomain:Domain
	{
		private class IntDomainIterator : System.Collections.IEnumerator
		{
            private int choice;
            public IntDomainIterator(IntDomain enclosingInstance)
			{
				InitBlock(enclosingInstance);
			}
			private void  InitBlock(IntDomain eI)
			{
				enclosingInstance = eI;
				choice = Enclosing_Instance.min__Field;
			}
			private IntDomain enclosingInstance;
			public virtual Object Current
			{
				get
				{
					if (!MoveNext())
						throw new ArgumentOutOfRangeException();
					IntDomain d = new IntDomain(choice);
					choice++;
					return d;
				}
				
			}
			public IntDomain Enclosing_Instance
			{
				get
				{
					return enclosingInstance;
				}
				
			}
			
			public virtual bool MoveNext()
			{
				if (Enclosing_Instance.size__Field == 0)
					return false;
				while (choice <= Enclosing_Instance.max__Field)
				{
					if (Enclosing_Instance.contains(choice))
						return true;
					choice++;
				}
				return false;
			}

		    virtual public void  Reset()
			{
			}
		}
        public const int MIN_VALUE = unchecked((int) 0xc0000001);
	    public const int MAX_VALUE = 0x3fffffff;
		public static IntDomain EMPTY = new IntDomain();
		public static IntDomain FULL = new IntDomain(MIN_VALUE, MAX_VALUE);
		private System.Collections.ArrayList intervals = new System.Collections.ArrayList();
		private int min__Field;
		private int max__Field;
		
		public IntDomain()
		{
		}
		
		public IntDomain(int val):this(val, val)
		{
		}
		
		public IntDomain(int mi, int ma)
		{
			mi = Math.Max(mi, MIN_VALUE);
			ma = Math.Min(ma, MAX_VALUE);
			if (mi <= ma)
			{
				int[] interval = new[]{mi, ma};
				intervals.Add(interval);
                size__Field = ma - mi + 1;
				min__Field = mi;
				max__Field = ma;
			}
		}
		
		private void  updateSize()
		{
			size__Field = 0;
			try
			{
				for (int i = 0; i < intervals.Count; ++i)
				{
					int[] interval = (int[]) intervals[i];
					size__Field += interval[1] - interval[0] + 1;
				}
			}
			catch (IndexOutOfRangeException)
			{
			}
		}
		
		private void  updateMinMax()
		{
			if (size__Field > 0)
			{
				try
				{
					int[] interval = (int[]) intervals[0];
					min__Field = interval[0];
					interval = (int[]) intervals[intervals.Count - 1];
					max__Field = interval[1];
				}
				catch (IndexOutOfRangeException)
				{
				}
			}
		}
		
		public override bool equals(Domain d0)
		{
			if (this == d0)
				return true;
			if (!(d0 is IntDomain))
				return false;
			IntDomain d = (IntDomain) d0;
			if (intervals.Count != d.intervals.Count)
				return false;
			try
			{
				for (int i = 0; i < intervals.Count; i++)
				{
					int[] i0 = (int[]) intervals[i];
					int[] i1 = (int[]) d.intervals[i];
					if (i0[0] != i1[0] || i0[1] != i1[1])
						return false;
				}
			}
			catch (IndexOutOfRangeException)
			{
			}
			return true;
		}
		
		public override Object Clone()
		{
			IntDomain d = new IntDomain();
			try
			{
				for (int i = 0; i < intervals.Count; ++i)
				{
					d.intervals.Add(((int[]) intervals[i]).Clone());
				}
			}
			catch (IndexOutOfRangeException)
			{
			}
			d.size__Field = size__Field;
			d.min__Field = min__Field;
			d.max__Field = max__Field;
			return d;
		}

        /// <summary>
        /// Returns a randomly selected element value.
        /// </summary>
        /// <returns>return a randomly selected element value</returns>
        public int randomElement()
        {
            Random ran = new Random();
            int n = ran.Next() * size__Field;
            foreach (int[] interval in intervals)
            {
                int m = interval[1] - interval[0] + 1;
                if (n < m)
                    return interval[0] + n;
                n -= m;
            }
            return min();
        }
		public override System.Collections.IEnumerator elements()
		{
			System.Collections.IEnumerator iter = new IntDomainIterator(this);
			return iter;
		}
		
		public virtual int min()
		{
			if (size__Field == 0)
				throw new ArgumentOutOfRangeException();
			return min__Field;
		}
		
		public virtual int max()
		{
			if (size__Field == 0)
				throw new ArgumentOutOfRangeException();
			return max__Field;
		}
		
		public virtual int value_()
		{
			if (size__Field != 1)
				throw new ArgumentOutOfRangeException();
			return min__Field;
		}
		
		public override Object element()
		{
			return value_();
		}
		
		private int indexOf(int elem)
		{
			if (elem < min__Field || max__Field < elem)
				return - 1;
			try
			{
				for (int i = 0; i < intervals.Count; i++)
				{
					int[] interval = (int[]) intervals[i];
					if (elem < interval[0])
						return - 1;
					if (elem <= interval[1])
						return i;
				}
			}
			catch (IndexOutOfRangeException)
			{
			}
			return - 1;
		}
		
		private int indexOf(Object o)
		{
			if (!(o is ValueType))
				return - 1;
			return indexOf(Convert.ToInt32(o));
		}
		
		public virtual bool contains(int elem)
		{
			return indexOf(elem) >= 0;
		}
		
		public override bool contains(Object o)
		{
			if (!(o is ValueType))
				return false;
			return contains(Convert.ToInt32(o));
		}
		
		public override Domain insert(Object o)
		{
            throw new NotImplementedException();
		}
		
		public virtual void  remove(int elem)
		{
			int i = indexOf(elem);
			if (i < 0)
				return ;
			try
			{
				int[] interval = (int[]) intervals[i];
				int lo = interval[0];
				int hi = interval[1];
				if (elem == lo && elem == hi)
				{
					intervals.RemoveAt(i);
				}
				else if (elem == lo)
				{
					interval[0] = lo + 1;
				}
				else if (elem == hi)
				{
					interval[1] = hi - 1;
				}
				else
				{
					interval[0] = elem + 1;
					intervals.Insert(i, new[]{lo, elem - 1});
				}
				size__Field--;
				updateMinMax();
			}
			catch (IndexOutOfRangeException)
			{
			}
		}
		
		public virtual void  remove(Object o)
		{
			if (!(o is ValueType))
				return ;
			remove(Convert.ToInt32(o));
		}
		
		public virtual IntDomain delete(int elem)
		{
			if (!contains(elem))
				return this;
			IntDomain d = (IntDomain) Clone();
			d.remove(elem);
			return d;
		}
		
		public override Domain delete(Object o)
		{
			if (!(o is ValueType))
				return this;
			return delete(Convert.ToInt32(o));
		}
		
		public virtual IntDomain delete(int lo, int hi)
		{
			if (size__Field == 0 || lo > hi || hi < min__Field || max__Field < lo)
				return this;
			if (lo == hi)
				return delete(lo);
			IntDomain d = new IntDomain();
			try
			{
				for (int i = 0; i < intervals.Count; i++)
				{
					int[] interval = (int[]) intervals[i];
					int mi = Math.Max(lo, interval[0]);
					int ma = Math.Min(hi, interval[1]);
					if (mi <= ma)
					{
						if (interval[0] < mi)
						{
							int[] in_ = new int[2];
							in_[0] = interval[0];
							in_[1] = mi - 1;
							d.intervals.Add(in_);
						}
						if (ma < interval[1])
						{
							int[] in_ = new int[2];
							in_[0] = ma + 1;
							in_[1] = interval[1];
							d.intervals.Add(in_);
						}
					}
					else
					{
						int[] in_ = new int[2];
						in_[0] = interval[0];
						in_[1] = interval[1];
						d.intervals.Add(in_);
					}
				}
			}
			catch (IndexOutOfRangeException)
			{
			}
			d.updateSize();
			d.updateMinMax();
			return d;
		}
		
		public override Domain cap(Domain d)
		{
			if (!(d is IntDomain))
				return EMPTY;
			IntDomain new_d = new IntDomain();
			IntDomain d0 = this;
			IntDomain d1 = (IntDomain) d;
			try
			{
			    int i0 = 0;
				int i1 = 0;
				while (i0 < d0.intervals.Count && i1 < d1.intervals.Count)
				{
					int[] interval = (int[]) d0.intervals[i0];
					int min0 = interval[0];
					int max0 = interval[1];
					interval = (int[]) d1.intervals[i1];
					int min1 = interval[0];
					int max1 = interval[1];
					if (max0 < min1)
					{
						i0++;
						continue;
					}
					if (max1 < min0)
					{
						i1++;
						continue;
					}
					interval = new int[2];
					interval[0] = Math.Max(min0, min1);
					interval[1] = Math.Min(max0, max1);
					new_d.intervals.Add(interval);
					if (max0 <= max1)
						i0++;
					if (max1 <= max0)
						i1++;
				}
			}
			catch (IndexOutOfRangeException)
			{
			}
			new_d.updateSize();
			new_d.updateMinMax();
			if (new_d.Empty)
				return EMPTY;
			return new_d;
		}
		
		public override Domain cup(Domain d)
		{
            throw new NotImplementedException();
		}
		
		public override Domain difference(Domain d)
		{
            throw new NotImplementedException();
		}
		
		public virtual IntDomain capInterval(int lo, int hi)
		{
			IntDomain d = this;
			if (MIN_VALUE < lo)
				d = d.delete(MIN_VALUE, lo - 1);
			if (hi < MAX_VALUE)
				d = d.delete(hi + 1, MAX_VALUE);
			return d;
		}
		
		private static String toString(int x)
		{
		    if (x == MIN_VALUE)
			{
				return "min";
			}
		    if (x == MAX_VALUE)
		    {
		        return "max";
		    }
		    return Convert.ToString(x);
		}

	    public override String ToString()
		{
			String s = "";
			String delim = "";
			try
			{
				for (int i = 0; i < intervals.Count; i++)
				{
					int[] interval = (int[]) intervals[i];
					s += (delim + toString(interval[0]));
					if (interval[0] < interval[1])
					{
						s += ("-" + toString(interval[1]));
					}
					delim = ",";
				}
			}
			catch (IndexOutOfRangeException)
			{
			}
			if (size() == 1)
			{
				return s;
			}
			return "{" + s + "}";
		}
	}
}