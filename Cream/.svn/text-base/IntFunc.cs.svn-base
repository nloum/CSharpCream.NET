using System;

namespace  Cream
{
	
	public class IntFunc:Constraint
	{
		public const int NEGATE = 0;
		public const int ABS = 1;
		public const int SIGN = 2;
		private int arith;
		private Variable[] v;

        public IntFunc(Network net, int a, Variable v0, Variable v1)
            : this(net, a, new Variable[] { v0, v1 })
        {
        }

        public IntFunc(Network net, int a, Variable v0, int x1)
            : this(net, a, v0, new IntVariable(net, x1))
        {
        }

        public IntFunc(Network net, int a, int x0, Variable v1)
            : this(net, a, new IntVariable(net, x0), v1)
        {
        }

        private IntFunc(Network net, int a, Variable[] v)
            : this(net, a, v, ConstraintTypes.Hard)
        {
        }

        public IntFunc(Network net, int a, Variable v0, Variable v1, ConstraintTypes cType)
            : this(net, a, new Variable[] { v0, v1 }, cType)
        {
        }

        public IntFunc(Network net, int a, Variable v0, int x1, ConstraintTypes cType)
            : this(net, a, v0, new IntVariable(net, x1), cType)
        {
        }

        public IntFunc(Network net, int a, int x0, Variable v1, ConstraintTypes cType)
            : this(net, a, new IntVariable(net, x0), v1, cType)
        {
        }

        private IntFunc(Network net, int a, Variable[] v, ConstraintTypes cType)
            : this(net, a, v, cType, 0)
        {
        }

        public IntFunc(Network net, int a, Variable v0, Variable v1, ConstraintTypes cType, int weight)
            : this(net, a, new Variable[] { v0, v1 }, cType, weight)
        {
        }

        public IntFunc(Network net, int a, Variable v0, int x1, ConstraintTypes cType, int weight)
            : this(net, a, v0, new IntVariable(net, x1), cType, weight)
        {
        }

        public IntFunc(Network net, int a, int x0, Variable v1, ConstraintTypes cType, int weight)
            : this(net, a, new IntVariable(net, x0), v1, cType, weight)
        {
        }

        private IntFunc(Network net, int a, Variable[] v, ConstraintTypes cType, int weight)
            : base(net, cType, weight)
        {
            arith = a;
            this.v = v;
        }

        public Variable[] Vars
        {
            get
            {
                return v;
            }
        }
        
        protected internal override Constraint copy(Network net)
		{
			return new IntFunc(net, arith, copy(v, net));
		}
		
		protected internal override bool isModified()
		{
			return isModified(v);
		}
		
		private static bool satisfyNEGATE(Variable v0, Variable v1, Trail trail)
		{
			IntDomain d0 = (IntDomain) v0.Domain;
			IntDomain d1 = (IntDomain) v1.Domain;
			
			if (d1.size() == 1)
			{
				// v0 = -v1
				int value_ = - d1.value_();
				if (!d0.contains(value_))
					return false;
                if (d0.size() > 1)
                {
                    v0.updateDomain(new IntDomain(value_), trail);
                }
			    return true;
			}
		    if (d0.size() == 1)
		    {
		        // v1 = -v0
		        int value_ = - d0.value_();
		        if (!d1.contains(value_))
		            return false;
		        if (d1.size() > 1)
                    if (trail != null)
                    {
                        v1.updateDomain(new IntDomain(value_), trail);
                    }
		        return true;
		    }

		    // v0 = -v1
			d0 = d0.capInterval(- d1.max(), - d1.min());
			if (d0.Empty)
				return false;
            if (trail != null)
            {
                v0.updateDomain(d0, trail);
            }
		    // v1 = -v0
			d1 = d1.capInterval(- d0.max(), - d0.min());
			if (d1.Empty)
				return false;
            if (trail != null)
            {
                v1.updateDomain(d1, trail);
            }
		    return true;
		}
		
		private static bool satisfyABS(Variable v0, Variable v1, Trail trail)
		{
			IntDomain d0 = (IntDomain) v0.Domain;
			IntDomain d1 = (IntDomain) v1.Domain;
			
			if (d1.size() == 1)
			{
				// v0 = abs(v1)
				int value_ = Math.Abs(d1.value_());
				if (!d0.contains(value_))
					return false;
				if (d0.size() > 1)
                    if (trail != null)
                    {
                        v0.updateDomain(new IntDomain(value_), trail);
                    }
			    return true;
			}
		    if (d0.size() == 1)
		    {
		        // abs(v1) = v0
		        int value_ = d0.value_();
		        if (value_ < 0)
		        {
		            return false;
		        }
		        if (value_ == 0)
		        {
		            if (!d1.contains(value_))
		                return false;
		            if (d1.size() > 1)
                        if (trail != null)
                        {
                            v1.updateDomain(new IntDomain(value_), trail);
                        }
		            return true;
		        }
		        if (d1.contains(value_) && d1.contains(- value_))
		        {
		            if (d1.size() > 2)
		            {
		                value_ = Math.Abs(value_);
		                d1 = new IntDomain(- value_, value_);
		                d1 = d1.delete(- value_ + 1, value_ - 1);
                        if (trail != null)
                        {
                            v1.updateDomain(d1, trail);
                        }
		            }
		            return true;
		        }
		        if (d1.contains(value_))
		        {
		            if (d1.size() > 1)
                        if (trail != null)
                        {
                            v1.updateDomain(new IntDomain(value_), trail);
                        }
		            return true;
		        }
		        if (d1.contains(- value_))
		        {
		            if (d1.size() > 1)
                        if (trail != null)
                        {
                            v1.updateDomain(new IntDomain(-value_), trail);
                        }
		            return true;
		        }
		        return false;
		    }

		    int min;
			int max;
			// v0 = abs(v1)
			if (d1.min() >= 0)
			{
				min = d1.min();
				max = d1.max();
			}
			else if (d1.max() <= 0)
			{
				min = - d1.max();
				max = - d1.min();
			}
			else
			{
				min = 0;
				max = Math.Max(- d1.min(), d1.max());
			}
			d0 = d0.capInterval(min, max);
			if (d0.Empty)
				return false;
            if (trail != null)
            {
                v0.updateDomain(d0, trail);
            }
		    // abs(v1) = v0
			min = d0.min();
			max = d0.max();
			d1 = d1.capInterval(- max, max);
			if (d1.Empty)
				return false;
			if (min > 0)
				d1 = d1.delete(- min + 1, min - 1);
            if (trail != null)
            {
                v1.updateDomain(d1, trail);
            }

		    return true;
		}
		
		private static bool satisfySIGN(Variable v0, Variable v1, Trail trail)
		{
			IntDomain d0 = (IntDomain) v0.Domain;
			IntDomain d1 = (IntDomain) v1.Domain;
			
			if (d1.size() == 1)
			{
				// v0 = sign(v1)
				int sign = 0;
				if (d1.value_() < 0)
				{
					sign = - 1;
				}
				else if (d1.value_() > 0)
				{
					sign = 1;
				}
				if (!d0.contains(sign))
					return false;
				if (d0.size() > 1)
                    if (trail != null)
                    {
                        v0.updateDomain(new IntDomain(sign), trail);
                    }
			    return true;
			}
		    if (d0.size() == 1)
		    {
		        // sign(v1) = v0
		        int sign = d0.value_();
		        if (sign < 0)
		        {
		            if (d1.max() >= 0)
		            {
		                d1 = d1.capInterval(IntDomain.MIN_VALUE, - 1);
		                if (d1.Empty)
		                    return false;
                        if (trail != null)
                        {
                            v1.updateDomain(d1, trail);
                        }
		            }
		            return true;
		        }
		        if (sign == 0)
		        {
		            if (!d1.contains(0))
		                return false;
		            if (d1.size() > 1)
                        if (trail != null)
                        {
                            v1.updateDomain(new IntDomain(0), trail);
                        }
		            return true;
		        }
		        if (sign > 0)
		        {
		            if (d1.min() <= 0)
		            {
		                d1 = d1.capInterval(1, IntDomain.MAX_VALUE);
		                if (d1.Empty)
		                    return false;
                        if (trail != null)
                        {
                            v1.updateDomain(d1, trail);
                        }
		            }
		            return true;
		        }
		        return false;
		    }

		    // v0 = sign(v1)
			if (!(- 1 <= d0.min() && d0.max() <= 1))
			{
				d0 = d0.capInterval(- 1, 1);
			}
			if (d1.min() >= 0)
				d0 = d0.delete(- 1);
			if (!d1.contains(0))
				d0 = d0.delete(0);
			if (d1.max() <= 0)
				d0 = d0.delete(1);
			
			// sign(v1) = v0
			if (!d0.contains(- 1))
			{
				if (d1.min() < 0)
					d1 = d1.capInterval(0, IntDomain.MAX_VALUE);
			}
			if (!d0.contains(0))
			{
				d1 = d1.delete(0);
			}
			if (!d0.contains(1))
			{
				if (d1.max() > 0)
					d1 = d1.capInterval(IntDomain.MIN_VALUE, 0);
			}
			if (d0.Empty)
				return false;
			if (d1.Empty)
				return false;
            if (trail != null)
            {
                v0.updateDomain(d0, trail);
                v1.updateDomain(d1, trail);
            }

		    return true;
		}

        protected internal override bool isSatisfied()
        {
            return satisfy(null);
        }
		protected internal override bool satisfy(Trail trail)
		{
			switch (arith)
			{
				case NEGATE: 
					return satisfyNEGATE(v[0], v[1], trail);
				
				case ABS: 
					return satisfyABS(v[0], v[1], trail);
				
				case SIGN: 
					return satisfySIGN(v[0], v[1], trail);
				}
			return false;
		}
		
		public override String ToString()
		{
			String a = "";
			switch (arith)
			{
				
				case NEGATE: 
					a = "NEGATE"; break;
				
				case ABS: 
					a = "ABS"; break;
				
				case SIGN: 
					a = "SIGN"; break;
				}
			return "IntFunc(" + a + "," + toString(v) + ")";
		}
	}
}