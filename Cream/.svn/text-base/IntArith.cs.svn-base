using System;

namespace  Cream
{
	
	public class IntArith:Constraint
	{
		public const int ADD = 0;
		public const int SUBTRACT = 1;
		public const int MULTIPLY = 2;
		// public static final int DIVIDE = 3;
		// public static final int MOD = 4;
		// public static final int POW = 5;
		public const int MAX = 6;
		public const int MIN = 7;
		private int arith;
		private Variable[] v;

        public IntArith(Network net, int a, Variable v0, Variable v1, Variable v2)
            : this(net, a, new Variable[] { v0, v1, v2 })
        {
        }

        public IntArith(Network net, int a, Variable v0, Variable v1, int x2)
            : this(net, a, v0, v1, new IntVariable(net, x2))
        {
        }

        public IntArith(Network net, int a, Variable v0, int x1, Variable v2)
            : this(net, a, v0, new IntVariable(net, x1), v2)
        {
        }

        public IntArith(Network net, int a, int x0, Variable v1, Variable v2)
            : this(net, a, new IntVariable(net, x0), v1, v2)
        {
        }

        private IntArith(Network net, int a, Variable[] v)
            : this(net, a, v, ConstraintTypes.Hard)
        {
        }

        public IntArith(Network net, int a, Variable v0, Variable v1, Variable v2, ConstraintTypes cType)
            : this(net, a, new Variable[] { v0, v1, v2 }, cType)
        {
        }

        public IntArith(Network net, int a, Variable v0, Variable v1, int x2, ConstraintTypes cType)
            : this(net, a, v0, v1, new IntVariable(net, x2), cType)
        {
        }

        public IntArith(Network net, int a, Variable v0, int x1, Variable v2, ConstraintTypes cType)
            : this(net, a, v0, new IntVariable(net, x1), v2, cType)
        {
        }

        public IntArith(Network net, int a, int x0, Variable v1, Variable v2, ConstraintTypes cType)
            : this(net, a, new IntVariable(net, x0), v1, v2, cType)
        {
        }

        private IntArith(Network net, int a, Variable[] v, ConstraintTypes cType)
            : this(net, a, v, cType, 0)
        {
        }

        public IntArith(Network net, int a, Variable v0, Variable v1, Variable v2, ConstraintTypes cType, int weight)
            : this(net, a, new Variable[] { v0, v1, v2 }, cType, weight)
        {
        }

        public IntArith(Network net, int a, Variable v0, Variable v1, int x2, ConstraintTypes cType, int weight)
            : this(net, a, v0, v1, new IntVariable(net, x2), cType, weight)
        {
        }

        public IntArith(Network net, int a, Variable v0, int x1, Variable v2, ConstraintTypes cType, int weight)
            : this(net, a, v0, new IntVariable(net, x1), v2, cType, weight)
        {
        }

        public IntArith(Network net, int a, int x0, Variable v1, Variable v2, ConstraintTypes cType, int weight)
            : this(net, a, new IntVariable(net, x0), v1, v2, cType, weight)
        {
        }

        private IntArith(Network net, int a, Variable[] v, ConstraintTypes cType, int weight)
            : base(net, cType, weight)
        {
            arith = a;
            this.v = v;
        }

        public Variable[] Vars
        {
            get
            {
                return v;
            }
        }
        
        protected internal override Constraint copy(Network net)
		{
			return new IntArith(net, arith, Constraint.copy(v, net));
		}
		
		protected internal override bool isModified()
		{
			return isModified(v);
		}
		
		private bool satisfyADD(Variable v0, Variable v1, Variable v2, Trail trail)
		{
			IntDomain d0 = (IntDomain) v0.Domain;
			IntDomain d1 = (IntDomain) v1.Domain;
			IntDomain d2 = (IntDomain) v2.Domain;
			
			if (d1.size() == 1 && d2.size() == 1)
			{
				// v0 = v1 + v2
				int value_ = d1.value_() + d2.value_();
				if (!d0.contains(value_))
					return false;
				if (d0.size() > 1)
                    if (trail != null)
                    {
                        v0.updateDomain(new IntDomain(value_), trail);
                    }
			    return true;
			}
		    if (d0.size() == 1 && d2.size() == 1)
		    {
		        // v1 = v0 - v2
		        int value_ = d0.value_() - d2.value_();
		        if (!d1.contains(value_))
		            return false;
		        if (d1.size() > 1)
                    if (trail != null)
                    {
                        v1.updateDomain(new IntDomain(value_), trail);
                    }
		        return true;
		    }
		    if (d0.size() == 1 && d1.size() == 1)
		    {
		        // v2 = v0 - v1
		        int value_ = d0.value_() - d1.value_();
		        if (!d2.contains(value_))
		            return false;
		        if (d2.size() > 1)
                    if (trail != null)
                    {
                        v2.updateDomain(new IntDomain(value_), trail);
                    }
		        return true;
		    }

		    // v0 = v1 + v2
			d0 = d0.capInterval(d1.min() + d2.min(), d1.max() + d2.max());
			if (d0.Empty)
				return false;
            if (trail != null)
            {
                v0.updateDomain(d0, trail);
            }
		    // v1 = v0 - v2
			d1 = d1.capInterval(d0.min() - d2.max(), d0.max() - d2.min());
			if (d1.Empty)
				return false;
            if (trail != null)
            {
                v1.updateDomain(d1, trail);
            }
		    // v2 = v0 - v1
			d2 = d2.capInterval(d0.min() - d1.max(), d0.max() - d1.min());
			if (d2.Empty)
				return false;
            if (trail != null)
            {
                v2.updateDomain(d2, trail);
            }

		    return true;
		}
		
		private static int toInt(long x)
		{
			return (int) Math.Max(IntDomain.MIN_VALUE, Math.Min(IntDomain.MAX_VALUE, x));
		}
		
		private static int min(int[] x)
		{
			int m = x[0];
			for (int i = 1; i < x.Length; i++)
				m = Math.Min(m, x[i]);
			return m;
		}
		
		private static int max(int[] x)
		{
			int m = x[0];
			for (int i = 1; i < x.Length; i++)
				m = Math.Max(m, x[i]);
			return m;
		}
		
		private IntDomain multiply(IntDomain d0, IntDomain d1, IntDomain d2)
		{
			if (!d1.contains(0) && !d2.contains(0))
			{
				d0 = d0.delete(0);
				if (d0.Empty)
					return IntDomain.EMPTY;
			}
			int[] x = new int[]{toInt(d1.min() * (long) d2.min()), toInt(d1.min() * (long) d2.max()), toInt(d1.max() * (long) d2.min()), toInt(d1.max() * (long) d2.max())};
			d0 = d0.capInterval(min(x), max(x));
			return d0;
		}
		
		private IntDomain divide(IntDomain d0, IntDomain d1, IntDomain d2)
		{
			if (!d1.contains(0))
			{
				d0 = d0.delete(0);
				if (d0.Empty)
					return IntDomain.EMPTY;
			}
			if (d2.contains(0))
			{
				return d0;
			}
		    if (d2.max() < 0 || 0 < d2.min())
		    {
		        int[] x = new int[]{d1.min() / d2.min(), d1.max() / d2.min(), d1.min() / d2.max(), d1.max() / d2.max()};
		        d0 = d0.capInterval(min(x), max(x));
		    }
		    else
		    {
		        int[] x = new int[]{d1.min() / d2.min(), d1.max() / d2.min(), d1.min() / d2.max(), d1.max() / d2.max(), d1.min(), d1.max(), - d1.min(), - d1.max()};
		        d0 = d0.capInterval(min(x), max(x));
		    }
		    return d0;
		}
		
		private bool satisfyMULTIPLY(Variable v0, Variable v1, Variable v2, Trail trail)
		{
			IntDomain d0 = (IntDomain) v0.Domain;
			IntDomain d1 = (IntDomain) v1.Domain;
			IntDomain d2 = (IntDomain) v2.Domain;
			
			if (d1.size() == 1 && d2.size() == 1)
			{
				// v0 = v1 * v2
				int value_ = toInt(d1.value_() * (long) d2.value_());
				if (!d0.contains(value_))
					return false;
				if (d0.size() > 1)
                    if (trail != null)
                    {
                        v0.updateDomain(new IntDomain(value_), trail);
                    }
			    return true;
			}
		    if (d0.size() == 1 && d2.size() == 1)
		    {
		        // v1 = v0 / v2
		        int x = d0.value_();
		        int y = d2.value_();
		        if (y == 0)
		        {
		            return x == 0;
		        }
		        if (x % y != 0)
		        {
		            return false;
		        }
		        int value_ = x / y;
		        if (!d1.contains(value_))
		            return false;
		        if (d1.size() > 1)
                    if (trail != null)
                    {
                        v1.updateDomain(new IntDomain(value_), trail);
                    }
		        return true;
		    }
		    if (d0.size() == 1 && d1.size() == 1)
		    {
		        // v2 = v0 / v1
		        int x = d0.value_();
		        int y = d1.value_();
		        if (y == 0)
		        {
		            return x == 0;
		        }
		        if (x % y != 0)
		        {
		            return false;
		        }
		        int value_ = x / y;
		        if (!d2.contains(value_))
		            return false;
		        if (d2.size() > 1)
                    if (trail != null)
                    {
                        v2.updateDomain(new IntDomain(value_), trail);
                    }
		        return true;
		    }

		    d0 = multiply(d0, d1, d2);
			if (d0.Empty)
				return false;
			d1 = divide(d1, d0, d2);
			if (d1.Empty)
				return false;
			d2 = divide(d2, d0, d1);
			if (d2.Empty)
				return false;
            if (trail != null)
            {
                if (d0 != v0.Domain)
                    v0.updateDomain(d0, trail);
                if (d1 != v1.Domain)
                    v1.updateDomain(d1, trail);
                if (d2 != v2.Domain)
                    v2.updateDomain(d2, trail);
            }
		    return true;
		}
		
		private bool satisfyMAX(Variable v0, Variable v1, Variable v2, Trail trail)
		{
			IntDomain d0 = (IntDomain) v0.Domain;
			IntDomain d1 = (IntDomain) v1.Domain;
			IntDomain d2 = (IntDomain) v2.Domain;
			
			if (d1.size() == 1 && d2.size() == 1)
			{
				// v0 = max(v1, v2)
				int value_ = Math.Max(d1.value_(), d2.value_());
				if (!d0.contains(value_))
					return false;
				if (d0.size() > 1)
                    if (trail != null)
                    {
                        v0.updateDomain(new IntDomain(value_), trail);
                    }
			    return true;
			}
			if (d0.size() == 1)
			{
				// max(v1, v2) = v0
				int value_ = d0.value_();
				if (!d1.contains(value_) && !d2.contains(value_))
					return false;
				if (d1.max() > value_)
				{
					d1.capInterval(IntDomain.MIN_VALUE, value_);
					if (d1.Empty)
						return false;
                    if (trail != null)
                    {
                        v1.updateDomain(d1, trail);
                    }
				}
				if (d2.max() > value_)
				{
					d2.capInterval(IntDomain.MIN_VALUE, value_);
					if (d2.Empty)
						return false;
                    if (trail != null)
                    {
                        v2.updateDomain(d2, trail);
                    }
				}
				return true;
			}
			
			// v0 = max(v1, v2)
			int min = Math.Max(d1.min(), d2.min());
			int max = Math.Max(d1.max(), d2.max());
			d0 = d0.capInterval(min, max);
			if (d0.Empty)
				return false;
            if (trail != null)
            {
                v0.updateDomain(d0, trail);
            }

		    // max(v1, v2) = v0
			if (d1.max() > d0.max())
				d1 = d1.capInterval(IntDomain.MIN_VALUE, d0.max());
			if (d2.max() > d0.max())
				d2 = d2.capInterval(IntDomain.MIN_VALUE, d0.max());
			if (d1.max() < d0.min())
			{
				d0 = (IntDomain) d0.cap(d2);
				d2 = d0;
			}
			if (d2.max() < d0.min())
			{
				d0 = (IntDomain) d0.cap(d1);
				d1 = d0;
			}
			if (d0.Empty)
				return false;
			if (d1.Empty)
				return false;
			if (d2.Empty)
				return false;
            if (trail != null)
            {
                v0.updateDomain(d0, trail);
                v1.updateDomain(d1, trail);
                v2.updateDomain(d2, trail);
            }
		    return true;
		}
		
		private bool satisfyMIN(Variable v0, Variable v1, Variable v2, Trail trail)
		{
			IntDomain d0 = (IntDomain) v0.Domain;
			IntDomain d1 = (IntDomain) v1.Domain;
			IntDomain d2 = (IntDomain) v2.Domain;
			
			if (d1.size() == 1 && d2.size() == 1)
			{
				// v0 = min(v1, v2)
				int value_ = Math.Min(d1.value_(), d2.value_());
				if (!d0.contains(value_))
					return false;
				if (d0.size() > 1)
                    if (trail != null)
                    {
                        v0.updateDomain(new IntDomain(value_), trail);
                    }
			    return true;
			}
			if (d0.size() == 1)
			{
				int value_ = d0.value_();
				if (!d1.contains(value_) && !d2.contains(value_))
					return false;
				// ???
				if (d1.min() < value_)
				{
					d1.capInterval(value_, IntDomain.MAX_VALUE);
					if (d1.Empty)
						return false;
                    if (trail != null)
                    {
                        v1.updateDomain(d1, trail);
                    }
				}
				if (d2.min() < value_)
				{
					d2.capInterval(value_, IntDomain.MAX_VALUE);
					if (d2.Empty)
						return false;
                    if (trail != null)
                    {
                        v2.updateDomain(d2, trail);
                    }
				}
				return true;
			}
			
			// v0 = min(v1, v2)
			int min = Math.Min(d1.min(), d2.min());
			int max = Math.Min(d1.max(), d2.max());
			d0 = d0.capInterval(min, max);
			if (d0.Empty)
				return false;
            if (trail != null)
            {
                v0.updateDomain(d0, trail);
            }
		    //
			if (d1.min() < d0.min())
				d1 = d1.capInterval(d0.min(), IntDomain.MAX_VALUE);
			if (d2.min() < d0.min())
				d2 = d2.capInterval(d0.min(), IntDomain.MAX_VALUE);
			if (d1.min() > d0.max())
			{
				d0 = (IntDomain) d0.cap(d2);
				d2 = d0;
			}
			if (d2.min() > d0.max())
			{
				d0 = (IntDomain) d0.cap(d1);
				d1 = d0;
			}
			if (d0.Empty)
				return false;
			if (d1.Empty)
				return false;
			if (d2.Empty)
				return false;
            if (trail != null)
            {
                v0.updateDomain(d0, trail);
                v1.updateDomain(d1, trail);
                v2.updateDomain(d2, trail);
            }
		    return true;
		}

        protected internal override bool isSatisfied()
        {
            return satisfy(null);
        }
		protected internal override bool satisfy(Trail trail)
		{
			switch (arith)
			{
				
				case ADD: 
					return satisfyADD(v[0], v[1], v[2], trail);
				
				case SUBTRACT: 
					return satisfyADD(v[1], v[0], v[2], trail);
				
				case MULTIPLY: 
					return satisfyMULTIPLY(v[0], v[1], v[2], trail);
				
				case MAX: 
					return satisfyMAX(v[0], v[1], v[2], trail);
				
				case MIN: 
					return satisfyMIN(v[0], v[1], v[2], trail);
				}
			return false;
		}
		
		public override String ToString()
		{
			String a = "";
			switch (arith)
			{
				
				case ADD: 
					a = "ADD"; break;
				
				case SUBTRACT: 
					a = "SUBTRACT"; break;
				
				case MULTIPLY: 
					a = "MULTIPLY"; break;
				
				case MAX: 
					a = "MAX"; break;
				
				case MIN: 
					a = "MIN"; break;
				}
			return "IntArith(" + a + "," + toString(v) + ")";
		}
	}
}